plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.8'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'
}

group = 'com.ddang'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.flywaydb:flyway-core'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            '**/*Application*',
                            '**/*Exception*',
                            '**/*Response*',
                            '**/*Request*',
                            '**/*Dto*',
                            '**/*Configuration*'
                    ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'METHOD'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }

            excludes = [
                    '*.*Exception*',
                    '*.*Response*',
                    '*.*Request*',
                    '*.*Application*',
                    '*.*Dto*',
                    '*.*Configuration*'
            ]
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

task jacocoTestCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}
